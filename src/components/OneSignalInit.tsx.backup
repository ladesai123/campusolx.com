
"use client";
import { useEffect } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

declare global {
  interface Window {
    OneSignalDeferred?: Array<(OneSignal: any) => void | Promise<void>>;
  }
}

export default function OneSignalInit() {
  const supabase = createClientComponentClient();

  useEffect(() => {
    let mounted = true;

    (async () => {
      try {
        // âœ… INITIALIZE FOR ALL USERS (not just logged-in)
        window.OneSignalDeferred = window.OneSignalDeferred || [];
        window.OneSignalDeferred.push(async (OneSignal: any) => {
          await OneSignal.init({
            appId: process.env.NEXT_PUBLIC_ONESIGNAL_APP_ID,
            safari_web_id: process.env.NEXT_PUBLIC_SAFARI_WEB_ID || undefined,
            autoPrompt: false, // âœ… Only use custom prompts, no automatic OneSignal popups
            notifyButton: { enable: false },
            allowLocalhostAsSecureOrigin: true, // for development
          });

          console.log('âœ… OneSignal initialized globally');

          // âœ… TAG AUTHENTICATED USER IMMEDIATELY 
          const { data: { user } } = await supabase.auth.getUser();
          if (user) {
            await OneSignal.setExternalUserId(user.id);
            await OneSignal.User.addTag('user_id', user.id);
            console.log('âœ… User tagged in OneSignal:', user.id);
          } else {
            console.warn('OneSignal initialized but no user found');
          }

          // âœ… LISTEN FOR AUTH CHANGES TO TAG NEW LOGINS
          supabase.auth.onAuthStateChange(async (event, session) => {
            if (!mounted) return;
            if (event === 'SIGNED_IN' && session?.user) {
              await OneSignal.setExternalUserId(session.user.id);
              await OneSignal.User.addTag('user_id', session.user.id);
              console.log('âœ… New user tagged in OneSignal:', session.user.id);
            }
            if (event === 'SIGNED_OUT') {
              await OneSignal.removeExternalUserId();
              console.log('âœ… User untagged from OneSignal');
            }
          });

          // âœ… SUBSCRIPTION CHANGE HANDLER (SDK v16 syntax)
          OneSignal.User.PushSubscription.addEventListener('change', async (event: any) => {
            if (!mounted) return;
            const isSubscribed = event.current.optedIn;
            console.log('ðŸ”” OneSignal subscription changed:', isSubscribed);
            if (isSubscribed) {
              try {
                const playerId = OneSignal.User.PushSubscription.id;
                console.log('âœ… OneSignal Player ID:', playerId);
              } catch (err) {
                console.error("Failed to get OneSignal playerId:", err);
              }
            }
          });
        });
      } catch (err) {
        console.error("OneSignalInit error:", err);
      }
    })();

    return () => { mounted = false; };
  }, [supabase]);

  return null;
}
